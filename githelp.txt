## Diff ##
if you want to see what you haven't git added yet:
	* git diff myfile.txt
or if you want to see already added changes
	* git diff --cached myfile.txt


### Logging ### 
What will be pushed
	*git log origin/master..master
or, more generally:
	*git log <since>..<until>
You can use this with grep to check for a specific, known commit:
	*git log <since>..<until> | grep <commit-hash>
Or you can also use git-rev-list to search for a specific commit:
	*git rev-list origin/master | grep <commit-hash> 


### Push ### 
Push specific commit
	*git push <remotename> <commit SHA>:<remotebranchname>

### Revert ### 
git fetch downloads the latest from remote without trying to merge or rebase anything.
Then the git reset resets the master branch to what you just fetched. The --hard option changes all the files in your working tree to match the files in origin/master.
	*git fetch --all
	*git reset --hard origin/master
Revert commit, keep changes
	*git reset HEAD^

## Remove from Staged (undo git add) ##
	*git reset HEAD -- <file>
	*git reset HEAD -- <directoryName>

## Remove added file from last commit ##
	*git reset --soft HEAD^ 
Then reset the unwanted files in order to leave them out from the commit:
	*git reset HEAD path/to/unwanted_file
Now commit again, you can even re-use the same commit message:
	*git commit -c ORIG_HEAD  


## Commit part of a file:
You can use git add --patch <filename> (or -p for short), and git will begin to break down your file into what it thinks are sensible "hunks" (portions of the file). It will then prompt you with this question:
    Stage this hunk [y,n,q,a,d,/,j,J,g,s,e,?]?
        y stage this hunk for the next commit
        n do not stage this hunk for the next commit
        q quit; do not stage this hunk or any of the remaining hunks
        a stage this hunk and all later hunks in the file
        d do not stage this hunk or any of the later hunks in the file
        g select a hunk to go to
        / search for a hunk matching the given regex
        j leave this hunk undecided, see next undecided hunk
        J leave this hunk undecided, see next hunk
        k leave this hunk undecided, see previous undecided hunk
        K leave this hunk undecided, see previous hunk
        s split the current hunk into smaller hunks
        e manually edit the current hunk
        ? print hunk help

### Ignore ### 
Ignore file
	*git update-index --skip-worktree <file>
Unignore file
	*git update-index --no-skip-worktree <file>
Show ignored
	*git ls-files -v . | grep ^S


### Branching ### 
Move everything to branch and reset master
	git stash
	git checkout -b <branch> master
	git branch -f master <SHA1_before_your_commits>
	git stash apply

